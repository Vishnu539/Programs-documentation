Solving Leetcode HARD problem number 4, Median of Two Sorted Arrays.

Problem link: https://leetcode.com/problems/median-of-two-sorted-arrays/description/

In any dataset, median is referred to the middle most value. It is a method of central tendency.
Note: Any dataset that we take to calculate must be sorted in ascending order.

There are two cases to calculate median for the given data:

Case 1: When the number of elements in the data is odd.
  Assume n is the no.of elements. If n is odd, we take (n / 2)th value as median of the set.
  For example, take the set (1,4,9). Here n = 3 (odd). So the median would be middle most value; i.e, 4. 

Case 2: When the number of elements in the data is even.
  If n is even, then the median would be the average of two elements present in the middle.
  for example, take the data 5,8,10,15. Here n = 4 (even). So the medain would be the average of 2nd and 3rd observations; i.e, (8 + 10) / 2 => 9.

Coming to out problem, we are given with two arrays with different lengths. It is said that the arrays are sorted by default. We have to return the median as the output.

Problem solving steps:

1. Merge the two arrays nums1 and nums2 into a new array new_nums which is also sorted.To achieve we used the following line of code.
    int[] new_nums = IntStream.concat(Arrays.stream(nums1), Arrays.stream(nums2)).sorted().toArray();

2. Consider the two test cases and write the logic for each aaccordingly.

Program:

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {

        //Merging two arrays
        int[] new_nums = IntStream.concat(Arrays.stream(nums1), Arrays.stream(nums2)).sorted().toArray();

        double mid = 0;

        //When the length of the array is odd
        if (new_nums.length % 2 != 0){
            mid = new_nums[new_nums.length / 2];
            return mid;
        }

        //When the length of the array is even
        else if(new_nums.length % 2 == 0){
            mid = 0.5 * (new_nums[(new_nums.length - 1) / 2] + new_nums[((new_nums.length - 1) / 2) + 1]);
            return mid;
        }

        return -1;
    }
}


Input:
nums1 = [1,3], nums2 = [2]

Expected output: 2
Actual output: 2

Time complexity: O(n log n)
Space complexity: O(n)


*** int[] new_nums = IntStream.concat(Arrays.stream(nums1), Arrays.stream(nums2)).sorted().toArray(); ***

This line of code defines an initialization statement in Java that creates a new integer array called new_nums and assigns it the result of several chained operations. Let's break it down step-by-step:

1. IntStream.concat(Arrays.stream(nums1), Arrays.stream(nums2)):
        Arrays.stream(nums1) and Arrays.stream(nums2) convert the existing integer arrays nums1 and nums2 into separate IntStream objects. These objects act like streams of integer values, one for each element in the respective array.
    IntStream.concat then combines these two streams into a single IntStream object. This effectively merges all the elements of both nums1 and nums2 into one long stream of integers.

2. sorted(): This method applies sorting to the combined IntStream in ascending order. Each element in the stream will be compared to its neighbors and rearranged to ensure the final order is ascending (lowest to highest).

3. toArray(): Finally, this method converts the sorted IntStream back into an integer array and stores the result in the newly created variable new_nums. This array will have the same number of elements as the combined stream, but they will be arranged in ascending order
